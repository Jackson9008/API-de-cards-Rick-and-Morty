// URL base da API Rick and Morty (endpoint de personagens)
const API_URL = 'https://rickandmortyapi.com/api/character';

// Vari√°vel que guarda o link da pr√≥xima p√°gina da API (para pagina√ß√£o)
let proximaPagina = API_URL;

// Refer√™ncias aos elementos do HTML usados no JavaScript
const listaCards = document.getElementById('listaCards');   // container onde os cards ser√£o inseridos
const carregando = document.getElementById('carregando');   // mensagem de "Carregando..."
const erro = document.getElementById('erro');               // mensagem de erro
const botaoMais = document.getElementById('carregarMais');  // bot√£o "Carregar Mais"
const busca = document.getElementById('busca');             // campo de busca por nome
const filtroStatus = document.getElementById('filtroStatus'); // filtro dropdown de status



// ======================================================================
// üîç Fun√ß√£o principal que consome a API e busca personagens
// ======================================================================
async function buscarPersonagens(url = API_URL) {
    try {
        // Mostra mensagem "Carregando..." enquanto faz a requisi√ß√£o
        carregando.style.display = 'block';
        erro.textContent = '';

        // Obt√©m valores dos filtros preenchidos pelo usu√°rio
        const nome = busca.value.trim();      // busca pelo nome
        const status = filtroStatus.value;    // filtro de status selecionado

        // Cria um objeto para montar os par√¢metros da URL
        const params = new URLSearchParams();
        if (nome) params.set('name', nome);       // adiciona par√¢metro name=...
        if (status) params.set('status', status); // adiciona par√¢metro status=...

        // Monta a URL final considerando pagina√ß√£o e filtros
        const fullUrl = url.includes('?')
            ? url + '&' + params
            : (params ? url + '?' + params : url);

        // Requisi√ß√£o usando Fetch API (ass√≠ncrona)
        const resposta = await fetch(fullUrl);

        // Se a resposta N√ÉO estiver OK (status 200), lan√ßa erro
        if (!resposta.ok) throw new Error('Erro ao buscar dados');

        // Converte a resposta em JSON
        const dados = await resposta.json();

        // Atualiza a vari√°vel com o link da pr√≥xima p√°gina da API
        proximaPagina = dados.info.next;

        // Envia a lista de personagens para cria√ß√£o dos cards
        mostrarPersonagens(dados.results);

    } catch (e) {
        // Exibe mensagem de erro na tela
        erro.textContent = 'Erro: ' + e.message;

    } finally {
        // Esconde mensagem "Carregando..." ap√≥s a requisi√ß√£o
        carregando.style.display = 'none';
    }
}



// ======================================================================
// üß© Fun√ß√£o que cria e insere os cards dinamicamente no DOM
// ======================================================================
function mostrarPersonagens(lista) {
    lista.forEach(p => {

        // Cria um elemento <div> para representar um card
        const card = document.createElement('div');

        // Adiciona a classe CSS para estiliza√ß√£o
        card.className = 'card';

        // Insere conte√∫do HTML dentro do card (imagem, nome, status etc.)
        card.innerHTML = `
            <img src="${p.image}" alt="${p.name}">
            <h3>${p.name}</h3>
            <p>Status: ${p.status}</p>
            <p>Esp√©cie: ${p.species}</p>
        `;

        // Insere o card dentro da grade (#listaCards)
        listaCards.appendChild(card);
    });
}



// ======================================================================
// üéõÔ∏è EVENTOS DO USU√ÅRIO (busca, filtro e bot√£o de carregar mais)
// ======================================================================

// Evento acionado enquanto o usu√°rio digita no campo de busca
busca.addEventListener('input', () => {
    listaCards.innerHTML = '';             // limpa os cards atuais
    buscarPersonagens(API_URL);            // busca novamente desde o in√≠cio
});

// Evento acionado quando o usu√°rio muda o filtro de status
filtroStatus.addEventListener('change', () => {
    listaCards.innerHTML = '';             // limpa a grade
    buscarPersonagens(API_URL);            // busca com novo filtro
});

// Bot√£o "Carregar Mais": chama a pr√≥xima p√°gina da API
botaoMais.addEventListener('click', () => {
    if (proximaPagina) buscarPersonagens(proximaPagina);
});



// ======================================================================
// üöÄ Quando a p√°gina termina de carregar, busca automaticamente a 1¬™ p√°gina
// ======================================================================
document.addEventListener('DOMContentLoaded', () => buscarPersonagens(API_URL));
